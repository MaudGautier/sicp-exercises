(define nil '())

(define (square-tree-1 tree)
  (cond ((null? tree) nil)
        ((not (pair? tree)) (* tree tree))
        (else (cons (square-tree-1 (car tree))
                    (square-tree-1 (cdr tree))))
    )
  )

(define (square-tree-2 tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
           (square-tree-2 sub-tree)
           (* sub-tree sub-tree)
           )
         )
    tree)
  )

(define tree1 (list 1
                   (list 2 (list 3 4) 5)
                   (list 6 7)))
(square-tree-1 tree1);(1 (4 (9 16) 25) (36 49))
(square-tree-2 tree1);(1 (4 (9 16) 25) (36 49))